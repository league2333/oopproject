buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath "io.github.fourlastor:construo:1.5.1"
        if (project.hasProperty('enableGraalNative') && enableGraalNative == 'true') {
            classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
        }
    }
}

plugins {
    id "application"
}

apply plugin: 'io.github.fourlastor.construo'

import io.github.fourlastor.construo.Target

// You need to define these versions explicitly if they aren't already defined
def gdxVersion = "1.11.0"  // Update this if you are using a different version of libGDX
def graalHelperVersion = "1.0.0" // Update as necessary

sourceSets.main.resources.srcDirs += [rootProject.file('assets').path]
mainClassName = 'com.mygdxgame.game.lwjgl3.Lwjgl3Launcher'
application.setMainClass(mainClassName)
eclipse.project.name = appName + '-lwjgl3'
java.sourceCompatibility = 8
java.targetCompatibility = 8
if (JavaVersion.current().isJava9Compatible()) {
    compileJava.options.release.set(8)
}

dependencies {
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation project(':core')

    // If GraalVM is enabled, add these dependencies
    if (project.hasProperty('enableGraalNative') && enableGraalNative == 'true') {
        implementation "io.github.berstanio:gdx-svmhelper-backend-lwjgl3:$graalHelperVersion"
        implementation "io.github.berstanio:gdx-svmhelper-extension-box2d:$graalHelperVersion"
    }
}

def os = System.properties['os.name'].toLowerCase()

run {
    workingDir = rootProject.file('assets').path
    setIgnoreExitValue(true)

    if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"
}

jar {
    // Sets the name of the .jar file this produces to the name of the game or app, with the version after.
    archiveFileName.set("${appName}-${projectVersion}.jar")

    // Exclude unnecessary duplicate files in the output JAR
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
    dependencies {
        exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
    }

    // Setting the manifest makes the JAR runnable
    manifest {
        attributes 'Main-Class': project.mainClassName
    }

    // Make the JAR executable on OSes that need extra instruction to make it run
    doLast {
        file(archiveFile).setExecutable(true, false)
    }
}

construo {
    name.set(appName)
    humanName.set(appName)
    version.set("$projectVersion")

    targets.configure {
        create("linuxX64", Target.Linux) {
            architecture.set(Target.Architecture.X86_64)
            jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_linux_hotspot_17.0.12_7.tar.gz")
        }
        create("macM1", Target.MacOs) {
            architecture.set(Target.Architecture.AARCH64)
            jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.12_7.tar.gz")
            identifier.set("com.mygdxgame.game." + appName)
            macIcon.set(project.file("icons/logo.icns"))
        }
        create("macX64", Target.MacOs) {
            architecture.set(Target.Architecture.X86_64)
            jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_mac_hotspot_17.0.12_7.tar.gz")
            identifier.set("com.mygdxgame.game." + appName)
            macIcon.set(project.file("icons/logo.icns"))
        }
        create("winX64", Target.Windows) {
            architecture.set(Target.Architecture.X86_64)
            jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_windows_hotspot_17.0.12_7.zip")
        }
    }
}

// Equivalent to the jar task; here for compatibility with gdx-setup.
tasks.register('dist') {
    dependsOn 'jar'
}

distributions {
    main {
        contents {
            into('libs') {
                project.configurations.runtimeClasspath.files.findAll { file ->
                    file.getName() != project.tasks.jar.outputs.files.singleFile.name
                }.each { file ->
                    exclude file.name
                }
            }
        }
    }
}

startScripts.dependsOn(':lwjgl3:jar')
startScripts.classpath = project.tasks.jar.outputs.files

if (project.hasProperty('enableGraalNative') && enableGraalNative == 'true') {
    apply from: file("nativeimage.gradle")
}
